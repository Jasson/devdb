1. erl-log模块原理
erl_loglevel  - 一个动态的log模块
erl_logger_h  - 一个error_logger的event handler模块.

<1> 在使用项目初始化的时候应该先安装erl_logger_h.
    error_logger:add_report_handler(erl_logger_h, LogPath)
    安装了新的event handler之后, 错误日志会同步出到stdout和我们的LogPath文件.

<2> log分为0-5一共6个等级
    等级数字越大，记录的内容越详细，如5是debug模式，记录的日志最详细

<3> erl_loglevel
    erl_loglevel模块只有两个APIs:
    set(Level) -> 设置当前的loglevel, 每次调用这个函数，都会根据level
                  动态的生成一个erl_logger模块，也就是erl_logger
                  模块是动态生成的，所以我们在使用它以前，至少要调用一次set/1函数。
    get()      -> 返回当前的loglevel


<4> erl_logger_h 
    erl_logger_h是实现的一个新error_logger的event handler, 实现了gen_event
    callback的模块.error_logger的默认行为是把错误日志输出到stdout,我们可以使用
    error_logger:add_report_handler(erl_logger_h, LogPath)的方式来为
    error_logger安装一个新的事件处理器，这样的话，错误日志会同步输出到LogPath指定的文件
    里面.

    使用方式:
    error_logger:error_msg(“this is error msg”).  %% 日志只会记录到stdout
    %% 安装新error_logger事件处理handler
    error_logger:add_report_handler(erl_logger_h, LogPath). 
    %% 日志会输出到记录到log
    error_logger:error_msg(“this is error msg – new”). 

    注意:
    只能调用一次add_report_handler/2, 如果调用多次, 一次调用会记录多条记录.
    删除event handler使用error_logger:delete_report_handler(erl_logger_h).


2. 如何使用erl-log模块?
调用下面两个宏初始化一下, 即可以使用:
?SETUP_LOG("test.log"),
?SET_LOG_LEVEL(3),
?DEBUG("scenario - 1# this is test msg~n", []).
