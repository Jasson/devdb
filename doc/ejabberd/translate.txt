$translate.erl

分析ejabberd多语言支持的原理:

1. ejabberd提供了对多语言的支持, 所有的语言包存储在msgs目录下, 以*.msg结尾,
   例如: 中文的语言包是zh.msg, 日文是ja.msg等等.

   语言包的数据存储格式如下(存储的都是erlang term), Key/Value形式的数据
   Key = 英文数据      EnKeyData
   Val = 翻译后的数据   TranslatedData

   例如: zh.msg
   {"Access Configuration","访问配置"}.
   {"Access Control List Configuration","访问控制列表(ACL)配置"}.
   {"Access control lists","访问控制列表(ACL)"}.
   {"Access Control Lists","访问控制列表(ACL)"}.
   ....

2. 内部使用transactions的ets表来存储msg信息, 是一个Key/Value形式的表, 在调用
   translate:start()后, 会把所有的*.msg的内容写入到这个ets表.

   Key = {Lang:string(), EnKeyData}
   Val = TranslatedData

3. 使用方式:
   translate:translate(Lang, Msg) -> TranslatedMsg
   其中Lang是语言包的前缀, 例如zh.msg的Lang="zh", jp.msg的Lang="jp".

   1) 在翻译的时候, 如果是transactions表中已经存在的数据, 返回翻译后的结果
      translate:translate("zh", "Access Configuration") -> "访问配置"
   2) 如果是transactions表中没有存在的数据, 返回Msg
      translate:translate("zh", "Access Configuration another") -> "Access Configuration another"

4. 测试代码:
-module(translate_test).
-export([init/0, run/0]).

-define(KEY1, "Access Configuration").
-define(KEY2, "Access Configuration-1").

init() ->
    load_config(),
    translate:start().


%% 测试结果:
%% key1:"Access Configuration", val1:[232,174,191,233,151,174,233,133,141,231,189,174]
%% key2:"Access Configuration-1", val2:"Access Configuration-1"
run() ->
    Val1 = translate:translate("zh", ?KEY1),
    Val2 = translate:translate("zh", ?KEY2),
    io:format("key1:~p, val1:~p~n", [?KEY1, Val1]),
    io:format("key2:~p, val2:~p~n", [?KEY2, Val2]).
    


%% Internal APIs:

load_config() ->
    ejabberd_loglevel:set(5),    %% 发生错误的时候记录日志
    stringprep_sup:start_link(),

    %% 创建config, local_config, acl三张表
    mnesia:stop(),
    mnesia:delete_schema([node()]),
    mnesia:create_schema([node()]),
    mnesia:start(),

    acl:start(),
    ejabberd_config:start().
