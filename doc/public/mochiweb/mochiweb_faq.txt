一些mochiweb常见问题的总结

===============================================
1. mochiweb如何动态的向客户端输出内容?
<1> 总结:
a. 如果生成动态内容, 通过Req:respond({Code, ResponseHeaders, Body})来发送.
b. 如果响应静态文件, 通过Req:serve_file(Path, DocRoot)来发送.
   (注意:是Req:serve_file/2而不是Req:server_file/2)

<2> 常用HTTP Status Code的总结
200 - OK
301 - Moved Permanently 
302 - Moved Temporarily 
400 - 非法请求(Bad Request)
500 - 服务器内部错误(Internal Server Error)


举例:
a. 输出text/plain和text/html的动态内容
Content = "<html><head></head><body><h2>this is h2</h2></body></html>";
注意下面两种输出方式在浏览器上呈现效果的区别:
Req:respond({200, [{"Content-Type", "text/plain"}], Content}).
Req:respond({200, [{"Content-Type", "text/html"}], Content}). 

b. 输出静态文件:
Req:serve_file("image/mypic.jpg", "/var/mochiweb/www")
会将/var/mochiweb/www/image/mypic.jpg的图片的内容读取后发送给客户端.


===============================================
2. mochiweb如何处理cookie?
<1> cookie的读取
Req:get_cookie_value(Key) -> string() | undefined

<2> cookie的设置
a. 产生一条Cookie:
   Cookie  = mochiweb_cookies:cookie(Key :: string(), Val :: string(), Options).
b. 发送Cookie(包含在ResponseHeaders中一起发送给客户端, 可以一次发送多条cookie)
   Req:respond({Code, ResponseHeaders, Body}).

例如:
CookieKey1 = mochiweb_cookies:cookie("key1", "val1", []),
CookieKey2 = mochiweb_cookies:cookie("key1", "val1", []),
Req:respond({200, [{"Content-Type","text/html"}, CookieKey1, CookieKey2], 
            "test cookie page!!!"});


===============================================
3. mochiweb如何处理URL重定向?
<1> 原理非常简单, 直接使用Req:respond/1来根据Code和ResponseHeaders来重定向
例如: 用户访问/login的时候重定向到/user/liqiang这个URL
Req:respond({302, [{"Location", "/user/liqiang"}], []}).


