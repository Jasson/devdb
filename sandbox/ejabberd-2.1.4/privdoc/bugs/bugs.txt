

===================================================================
ID: 1
State: Active - Closed
CreateDate: 2010/7/1
CloseDate: 2010/7/1
Description: ejabberd redis driver驱动在大约5分钟内如果没有做任何数据操作, 
             会自动关闭TCP链接
Solution: Fixed
===================================================================
详细描述:
ejabberd服务器启动, 没有任何客户端操作, 大约5分钟后TCP链接断开. 
下面是ejabberd.log中的详细信息, 因为我们的redis connection pool配置了6个TCP链接,
所以会有6条** tcp_closed的消息.

解决方式:
修改redis.conf, redis的配置文件中有如下的配置, 设置了如果客户端一定时间内空闲, 会断开
TCP链接, 我们原来使用默认的配置300秒, 也就是大约5分钟.
现在配置这个时间为0, 也就是取消自动断开客户端链接的约束.
# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

ejabberd.log
=INFO REPORT==== 2010-07-01 10:12:33 ===
I(<0.38.0>:ejabberd_app:70) : ejabberd 2.1.4 is started in the node ejabberd@localhost

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_1 terminating 
** Last message in was {tcp_closed,#Port<0.3362>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3362>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_2 terminating 
** Last message in was {tcp_closed,#Port<0.3365>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3365>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_3 terminating 
** Last message in was {tcp_closed,#Port<0.3366>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3366>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_4 terminating 
** Last message in was {tcp_closed,#Port<0.3367>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3367>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_5 terminating 
** Last message in was {tcp_closed,#Port<0.3368>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3368>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed

=ERROR REPORT==== 2010-07-01 10:17:41 ===
 (redis_client:256) [**E**]socket closed by remote peer
=ERROR REPORT==== 2010-07-01 10:17:41 ===
** Generic server redis_client_localhost_6379_6 terminating 
** Last message in was {tcp_closed,#Port<0.3369>}
** When Server state == {state,
                            {"localhost",6379},
                            #Port<0.3369>,0,normal,
                            {pubsub,undefined,undefined,undefined,undefined,
                                undefined}}
** Reason for termination == 
** tcp_closed


===================================================================
ID: 2
State: Active - Closed
CreateDate: 2010/7/5
CloseDate: 2010/7/5
Description: 当用户认证失败后, 会自动退出, 这个过程会调用ejabberd_c2s:terminate/3,
             日志中出现下面错误
Solution: Fixed
===================================================================
详细描述:
这个错误的原因是用户没有登录成功, 此时State#state.jid为undefined, 调用
jlib:jid_remove_resource(LogoutJID)会抛出异常.

解决方式:
对State#state.jid进行判断, 如果为undefined, 则直接退出.

ejabberd.log
=INFO REPORT==== 2010-07-05 12:27:14 ===
I(<0.343.0>:ejabberd_c2s:623) : ({socket_state,tls,{tlssock,#Port<0.3509>,#Port<0.3511>},<0.342.0>}) Failed authentication for liqiangtest8@91youbao.com

=INFO REPORT==== 2010-07-05 12:27:14 ===
D(<0.343.0>:ejabberd_c2s:1513) : Send XML on stream = "<failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'><not-authorized/></failure>"

=ERROR REPORT==== 2010-07-05 12:27:14 ===
** State machine <0.343.0> terminating 
** Last event in was closed
** When State == wait_for_feature_request
**      Data  == {state,{socket_state,tls,
                                      {tlssock,#Port<0.3509>,#Port<0.3511>},
                                      <0.342.0>},
                        ejabberd_socket,#Ref<0.0.0.9899>,false,"790637887",
                        {sasl_state,"jabber","91youbao.com",[],
                                    #Fun<ejabberd_c2s.1.44760145>,
                                    #Fun<ejabberd_c2s.2.117047571>,
                                    #Fun<ejabberd_c2s.3.49569146>,undefined,
                                    undefined},
                        c2s,c2s_shaper,false,true,false,true,
                        [verify_none,
                         {certfile,"/usr/local/imserver/server.pem"}],
                        false,undefined,[],"91youbao.com",[],undefined,
                        {0,nil},
                        {0,nil},
                        {0,nil},
                        {0,nil},
                        undefined,undefined,undefined,false,
                        {userlist,none,[],false},
                        unknown,unknown,
                        {{116,228,188,74},21523},
                        "*",
                        {{2010,7,5},{12,27,14}},
                        undefined}
** Reason for termination = 
** {function_clause,[{jlib,jid_remove_resource,[undefined]},
                     {ejabberd_c2s,terminate,3},
                     {p1_fsm,terminate,7},
                     {proc_lib,init_p_do_apply,3}]}



===================================================================
ID: 3
State: Active - Closed
CreateDate: 2010/7/14
CloseDate: 2010/7/14
Description: 我们修改了ejabberdctl中的HOST为本地IP地址之后, 启动ejabberd, ejabberd
             可以正常运行, 但是ejabberdctl的其它命令crash. 
             例如:
	     ejabberdctl status
             ejabberdctl connected_users
Solution: Fixed
===================================================================
详细描述:
这个错误的由于erl的启动参数-name导致的, 错误代码在ejabberdctl中, CONN_NAME不能正确解析成longname

错误的老版本:
ctlexec ()
{
    CONN_NAME=$1; shift
    COMMAND=$@
    $EXEC_CMD "$ERL \
      $NAME ${CONN_NAME} \
      -noinput \
      -hidden \
      -pa $EJABBERD_EBIN_PATH \
      -s ejabberd_ctl -extra $ERLANG_NODE $COMMAND"
}

解决方式:
修改这个函数, 在CONN_NAME后面添加@HOST后缀,
CONN_NAME=$1@HOST

正确版本:
ctlexec ()
{
    CONN_NAME=$1@HOST; shift
    COMMAND=$@
    $EXEC_CMD "$ERL \
      $NAME ${CONN_NAME} \
      -noinput \
      -hidden \
      -pa $EJABBERD_EBIN_PATH \
      -s ejabberd_ctl -extra $ERLANG_NODE $COMMAND"
}

错误信息:
{
  error_logger,
  {{2010,7,14},{9,53,34}},
  'Can\'t set long node name!\nPlease check your configuration\n',[]
}
......


===================================================================
ID: 4
State: Active - Closed
CreateDate: 2010/7/14
CloseDate: 2010/7/14
Description: ejabberd连接远程的MySQL数据库超时
Solution: Fixed
===================================================================
详细描述:
配置远程的ejabberd节点, 连接到远程的MySQL数据库的时候, 出现连接超时的错误
我们可以通过登录mysql, 运行show processlist;来显示当前的连接数, 会发现不断有连接login进来,
然后断开.
这是因为Erlang MySQL Driver的timeout时间默认为5秒太小了, 我们修改为60秒

解决方式:
修改mysql_conn.erl中的
-define(DEFAULT_STANDALONE_TIMEOUT, 5000).   %% 老版本
-define(DEFAULT_STANDALONE_TIMEOUT, 60000).  %% 新版本


