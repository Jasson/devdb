我们演示在一台机器上配置erlangonrails项目的多个实例,
我们可以使用同样的方式在不同的机器上配置集群.

1. 创建 & 编译一个blog项目
./script/new_erails blog /home/user/tmp/blog
cd /home/user/tmp/blog
make

2. 把这个项目拷贝两份, 我们将运行这两个实例:)
cp /home/user/tmp/blog /home/user/tmp/blog-product1
cp /home/user/tmp/blog /home/user/tmp/blog-product2

3. 修改blogctl
将blog-product1修改为 -> MYAPP=blogproduct1
将blog-product2修改为 -> MYAPP=blogproduct2

(同时要保证两个blogctl中的SETCOOKIE一致)

4. 修改blog.cfg
将blog-product1修改为 -> {port, 8000}.
将blog-product2修改为 -> {port, 8001}.

5. 启动blog-product1
cd /home/user/tmp/blog-product1
./scripts/blogctl start

6. 建立mnesia集群:
cd /home/user/tmp/blog-product2
erl -sname blogproduct2@localhost \
    -setcookie "setyourcookiehere" \
    -mnesia dir '"/home/user/tmp/blog-product2/database"'
>mnesia:start(),
>mnesia:change_config(extra_db_nodes, ['blogproduct1@localhost']).

执行之后, 可以调用mnesia:info()查看效果,
如果看到下面内容, 表示mnesia集群连接成功:
running db nodes = [blogproduct1@localhost, blogproduct2@localhost]

注意:
a. -setcookie的数据一定要和blogctl中的cookie数据一致
b. 如果部署在本地, 则使用-sname xxxx@localhost, 如果分开部署在物理机器上,
   则需要使用-name xxxx@local_ip
   (总之这个数据要和blogctl中的配置数据一致)

7. 在新增的ejabberd上运行:
mnesia:change_table_copy_type(schema, node(), disc_copies).

8. 同步erails_session表:
mnesia:add_table_copy(erails_session, node(), ram_copies).

9. init:stop() 退出erlang shell

10. 启动blog-product2
cd /home/user/tmp/blog-product2
./scripts/blogctl start
