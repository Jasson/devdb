该模块是一个公共的帮助模块

1. APIs:
<1> hash(Data :: binary()) -> integer()
    返回对Data进行md5处理后的结果, 由于MD5算法返回的结果是128bits(16bytes)的
    结果, 我们把128bits组成一个'大整数', 返回这个大的整数.
    
    例如:
    erlang:md5(<<"test-string">>).
    <<102,31,128,9,250,142,86,169,208,233,74,10,100,67,151,215>>
    
    e2d_util:hash(<<"test-string">>).
    135744813711702057912658533533222148055

<2> consult_str(Str :: string()) -> {'ok', any()} | {'error', any()}
    consult string, 返回一个erlang term. 要注意的是string中的erlang term
    必须是点(.)结尾.

    例如:
    e2d_util:consult_str("[v1, v2, v3].") -> {ok,[v1,v2,v3]}
    e2d_util:consult_str("{a,d}.") -> {ok,{a,d}}

<3> split_list(L :: list(), Val :: any()) ->
    {[], any(), list()} | {list(), any(), list()}
    在L中查询Val, 如果找到Val的位置是N, 则返回{lists:sublist(L, N-1), Val, lists:nthtail(N, L)}
    如果没找到则返回{[], Val, L}
   
    例如:
    e2d_util:split_list([a,b,c,d,e,f], c) -> {[a,b],c,[d,e,f]}
    e2d_util:split_list("abcdef", $c) -> {"ab",99,"def"}

<4> bucket_range(NumberofBuckets :: pos_integer()) -> pos_integer()
    根据Bucket的数量, 返回每个Bucket可以存储的数据的范围, 也就是每个bucket可以存放
    的元素的个数.

    我们使用2^128次方作为数据的范围. 
    (结合hash/1理解数据的散列)

    例如, 我们使用1024个bucket, 每个bucket可以存放的数据个数如下:
    e2d_util:bucket_range(1024).
    332306998946228968225951765070086144
<5> any_to_list(T :: any()) -> list()
    将任意的term()转换成list, term()可以是atom, float, integer和list.

<6> any_to_binary(T :: any()) -> binary()
    将任意的term()转换成binary, term()可以是atom, float, integer和list.




